let chalk,fs,firstline,d3;_e79‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_e79‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_e79‍.w("firstline",[["default",["firstline"],function(v){firstline=v}]]);_e79‍.w("d3",[["*",null,function(v){d3=v}]]);_e79‍.w("d3-dsv");

// const inquirer = require('inquirer')
// const chalk = require('chalk')
// const shell = require('shelljs')
// import inquirer from 'inquirer'


// import shell from 'shelljs'
const argv = process.argv
// import fs from 'fs'
// import readline from 'readline'




const codedFile = argv[2] || ''
const codeBook = argv[3] || ''
const codeMap = argv[4].split('=') || ['','']

const decodeHeader = (headerCode, codebook, codeMap) => {
  // if (headerMap[headerCode].indexOf(',') > -1) return console.error('Has comma')
  const headerMap = {}

  codebook.map((r) => {
    headerMap[r[codeMap[0]]] = r[codeMap[1]].trim()
  })

  if (headerMap[headerCode]) return headerMap[headerCode]
  else return headerCode
}

const run = async () => {
  _e79‍.g.console.log(
    chalk.green(`Input file: ${codedFile}`)
  )
  _e79‍.g.console.log(
    chalk.yellow(`Codebook file: ${codeBook}`)
  )  
  _e79‍.g.console.log(
    chalk.yellow(`Code column: ${codeMap[0]}`)
  )
  _e79‍.g.console.log(
    chalk.yellow(`Label column: ${codeMap[1]} `)
  )

  // const headerMap = {
  //   'A1a': 'Way Cooler Header',
  //   'A1b': 'Another way cooler header'
  // }

  // Create headerMap from codebook
  fs.readFile(codeBook, 'UTF-8', function (err, csv) {
    if(err) _e79‍.g.console.error(err)

    const parsedCodebook = d3.csvParse(csv)    

    // Get header line from the coded file
    firstline(codedFile).then((l) => {
      // console.log(l)
      const codedHeaders = l.split(',')

      _e79‍.g.console.log(
        chalk.bold('\nOriginal column headers:\n'),
        chalk.yellow(l)
      )

      // Go through every coded header and look up it's
      // human readable name 
      const labelHeaders = codedHeaders.map(h => {
        return decodeHeader(h, parsedCodebook, codeMap)
      })

      // And now these are our new human readable headers
      _e79‍.g.console.log(
        chalk.bold('\nRemapped column headers:\n'),
        chalk.green(labelHeaders.join(','))
      )
    })
  })

}

run();